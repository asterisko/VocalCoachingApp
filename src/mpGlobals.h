//
//  mpGlobals.h
//  iOS_MasterPitch
//
//  Created by SÃ©rgio Ivan Lopes on 4/30/13.
//
#ifndef MY_GLOBAL_FUN
#define MY_GLOBAL_FUN

#include "ofMain.h"
#include <stdlib.h>
#include <math.h>

//////////////////////////////////////////////////////////////////////////////////
// Convertion Defined functions
//////////////////////////////////////////////////////////////////////////////////
int     convSamp2Fram(int Nsamples);
int     convFram2Samp(int Nframes);
float   convSamp2Sec(int Nsamples);
int     convSec2Samp(float Nseconds);
float   convFram2Sec(int Nframes);
int     convSec2Fram(float Nseconds);

//////////////////////////////////////////////////////////////////////////////////
// Math functions
//////////////////////////////////////////////////////////////////////////////////
double  roundSIL(double d, int pp);
void    hamming(float* v, int size);        // Perform Hanning Window to array
void    dB(float * v, int size);               // convert vector to dB

//////////////////////////////////////////////////////////////////////////////////
// Elementary Array Operations
//////////////////////////////////////////////////////////////////////////////////
void    set2zero(float* v, int size);
float   sum(float* d, int size);				// return sum
float   power(float* d, int size);
void    scalarProd(float* v, int size, float scalar); // product
void    copy(float* a, float *b, int size); // copy a to b product

//////////////////////////////////////////////////////////////////////////////////
// Stats functions
//////////////////////////////////////////////////////////////////////////////////
float   mean(float* d, int size);				// return arithmetic mean
int     maxi(float* d, int size);               // return indice of max in array
int     mini(float* d, int size);               // return indice of min in array

//////////////////////////////////////////////////////////////////////////////////
// Noise Gate
//////////////////////////////////////////////////////////////////////////////////
double noiseGateSIL(double input, double threshold, long holdtime, double attack, double release);
    
#endif
